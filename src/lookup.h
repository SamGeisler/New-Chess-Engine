#pragma once
#include <cstdint>
#include <string>

#define SHIFT(x) (  ((uint64_t)1) << (x)  )

namespace BitboardOps{
    int bitScanForward(uint64_t bb);
    int countBits(uint64_t bb);
}

namespace DebugTools{
    void printBB(uint64_t bb);
    std::string notation(int pos);
}

namespace BitboardLookup{
    //Bitboards of each rank, file, diagonal
    constexpr uint64_t RANKS[8] = {0xFF00000000000000, 0x00FF000000000000, 0x0000FF0000000000, 0x000000FF00000000, 0x00000000FF000000, 0x0000000000FF0000, 0x000000000000FF00, 0x00000000000000FF};
    constexpr uint64_t FILES[8] = {0x0101010101010101, 0x0202020202020202, 0x0404040404040404, 0x0808080808080808, 0x1010101010101010, 0x2020202020202020, 0x4040404040404040, 0x8080808080808080};
    constexpr uint64_t DIAGONALS_NE[15] = {0x1, 0x102, 0x10204, 0x1020408, 0x102040810, 0x10204081020, 0x1020408102040, 0x102040810204080, 0x204081020408000, 0x408102040800000, 0x810204080000000, 0x1020408000000000, 0x2040800000000000, 0x4080000000000000, 0x8000000000000000};
    constexpr uint64_t DIAGONALS_NW[15] = {0x80, 0x8040, 0x804020, 0x80402010, 0x8040201008, 0x804020100804, 0x80402010080402, 0x8040201008040201, 0x4020100804020100, 0x2010080402010000, 0x1008040201000000, 0x804020100000000, 0x402010000000000, 0x201000000000000, 0x100000000000000};

    //Bitboards of possible destinations from starting square
    constexpr uint64_t KNIGHT_DEST[64] = {0x20400, 0x50800, 0xA1100, 0x142200, 0x284400, 0x508800, 0xA01000, 0x402000, 0x2040004, 0x5080008, 0xA110011, 0x14220022, 0x28440044, 0x50880088, 0xA0100010, 0x40200020, 0x204000402, 0x508000805, 0xA1100110A, 0x1422002214, 0x2844004428, 0x5088008850, 0xA0100010A0, 0x4020002040, 0x20400040200, 0x50800080500, 0xA1100110A00, 0x142200221400, 0x284400442800, 0x508800885000, 0xA0100010A000, 0x402000204000, 0x2040004020000, 0x5080008050000, 0xA1100110A0000, 0x14220022140000, 0x28440044280000, 0x50880088500000, 0xA0100010A00000, 0x40200020400000, 0x204000402000000, 0x508000805000000, 0xA1100110A000000, 0x1422002214000000, 0x2844004428000000, 0x5088008850000000, 0xA0100010A0000000, 0x4020002040000000, 0x400040200000000, 0x800080500000000, 0x1100110A00000000, 0x2200221400000000, 0x4400442800000000, 0x8800885000000000, 0x100010A000000000, 0x2000204000000000, 0x4020000000000, 0x8050000000000, 0x110A0000000000, 0x22140000000000, 0x44280000000000, 0x88500000000000, 0x10A00000000000, 0x20400000000000};
    constexpr uint64_t KING_DEST[64] = {0x302, 0x705, 0xE0A, 0x1C14, 0x3828, 0x7050, 0xE0A0, 0xC040, 0x30203, 0x70507, 0xE0A0E, 0x1C141C, 0x382838, 0x705070, 0xE0A0E0, 0xC040C0, 0x3020300, 0x7050700, 0xE0A0E00, 0x1C141C00, 0x38283800, 0x70507000, 0xE0A0E000, 0xC040C000, 0x302030000, 0x705070000, 0xE0A0E0000, 0x1C141C0000, 0x3828380000, 0x7050700000, 0xE0A0E00000, 0xC040C00000, 0x30203000000, 0x70507000000, 0xE0A0E000000, 0x1C141C000000, 0x382838000000, 0x705070000000, 0xE0A0E0000000, 0xC040C0000000, 0x3020300000000, 0x7050700000000, 0xE0A0E00000000, 0x1C141C00000000, 0x38283800000000, 0x70507000000000, 0xE0A0E000000000, 0xC040C000000000, 0x302030000000000, 0x705070000000000, 0xE0A0E0000000000, 0x1C141C0000000000, 0x3828380000000000, 0x7050700000000000, 0xE0A0E00000000000, 0xC040C00000000000, 0x203000000000000, 0x507000000000000, 0xA0E000000000000, 0x141C000000000000, 0x2838000000000000, 0x5070000000000000, 0xA0E0000000000000, 0x40C0000000000000};
    constexpr uint64_t ROOK_DEST[64] = {0x1010101010101FE, 0x2020202020202FD, 0x4040404040404FB, 0x8080808080808F7, 0x10101010101010EF, 0x20202020202020DF, 0x40404040404040BF, 0x808080808080807F, 0x10101010101FE01, 0x20202020202FD02, 0x40404040404FB04, 0x80808080808F708, 0x101010101010EF10, 0x202020202020DF20, 0x404040404040BF40, 0x8080808080807F80, 0x101010101FE0101, 0x202020202FD0202, 0x404040404FB0404, 0x808080808F70808, 0x1010101010EF1010, 0x2020202020DF2020, 0x4040404040BF4040, 0x80808080807F8080, 0x1010101FE010101, 0x2020202FD020202, 0x4040404FB040404, 0x8080808F7080808, 0x10101010EF101010, 0x20202020DF202020, 0x40404040BF404040, 0x808080807F808080, 0x10101FE01010101, 0x20202FD02020202, 0x40404FB04040404, 0x80808F708080808, 0x101010EF10101010, 0x202020DF20202020, 0x404040BF40404040, 0x8080807F80808080, 0x101FE0101010101, 0x202FD0202020202, 0x404FB0404040404, 0x808F70808080808, 0x1010EF1010101010, 0x2020DF2020202020, 0x4040BF4040404040, 0x80807F8080808080, 0x1FE010101010101, 0x2FD020202020202, 0x4FB040404040404, 0x8F7080808080808, 0x10EF101010101010, 0x20DF202020202020, 0x40BF404040404040, 0x807F808080808080, 0xFE01010101010101, 0xFD02020202020202, 0xFB04040404040404, 0xF708080808080808, 0xEF10101010101010, 0xDF20202020202020, 0xBF40404040404040, 0x7F80808080808080};
    constexpr uint64_t BISHOP_DEST[64] = {0x8040201008040200, 0x80402010080500, 0x804020110A00, 0x8041221400, 0x182442800, 0x10204885000, 0x102040810A000, 0x102040810204000, 0x4020100804020002, 0x8040201008050005, 0x804020110A000A, 0x804122140014, 0x18244280028, 0x1020488500050, 0x102040810A000A0, 0x204081020400040, 0x2010080402000204, 0x4020100805000508, 0x804020110A000A11, 0x80412214001422, 0x1824428002844, 0x102048850005088, 0x2040810A000A010, 0x408102040004020, 0x1008040200020408, 0x2010080500050810, 0x4020110A000A1120, 0x8041221400142241, 0x182442800284482, 0x204885000508804, 0x40810A000A01008, 0x810204000402010, 0x804020002040810, 0x1008050005081020, 0x20110A000A112040, 0x4122140014224180, 0x8244280028448201, 0x488500050880402, 0x810A000A0100804, 0x1020400040201008, 0x402000204081020, 0x805000508102040, 0x110A000A11204080, 0x2214001422418000, 0x4428002844820100, 0x8850005088040201, 0x10A000A010080402, 0x2040004020100804, 0x200020408102040, 0x500050810204080, 0xA000A1120408000, 0x1400142241800000, 0x2800284482010000, 0x5000508804020100, 0xA000A01008040201, 0x4000402010080402, 0x2040810204080, 0x5081020408000, 0xA112040800000, 0x14224180000000, 0x28448201000000, 0x50880402010000, 0xA0100804020100, 0x40201008040201};

    //Excluding final square
    constexpr uint64_t ROOK_DEST_TRUNC[64] = {0x101010101017E, 0x202020202027C, 0x404040404047A, 0x8080808080876, 0x1010101010106E, 0x2020202020205E, 0x4040404040403E, 0x8080808080807E, 0x1010101017E00, 0x2020202027C00, 0x4040404047A00, 0x8080808087600, 0x10101010106E00, 0x20202020205E00, 0x40404040403E00, 0x80808080807E00, 0x10101017E0100, 0x20202027C0200, 0x40404047A0400, 0x8080808760800, 0x101010106E1000, 0x202020205E2000, 0x404040403E4000, 0x808080807E8000, 0x101017E010100, 0x202027C020200, 0x404047A040400, 0x8080876080800, 0x1010106E101000, 0x2020205E202000, 0x4040403E404000, 0x8080807E808000, 0x1017E01010100, 0x2027C02020200, 0x4047A04040400, 0x8087608080800, 0x10106E10101000, 0x20205E20202000, 0x40403E40404000, 0x80807E80808000, 0x17E0101010100, 0x27C0202020200, 0x47A0404040400, 0x8760808080800, 0x106E1010101000, 0x205E2020202000, 0x403E4040404000, 0x807E8080808000, 0x7E010101010100, 0x7C020202020200, 0x7A040404040400, 0x76080808080800, 0x6E101010101000, 0x5E202020202000, 0x3E404040404000, 0x7E808080808000, 0x7E01010101010100, 0x7C02020202020200, 0x7A04040404040400, 0x7608080808080800, 0x6E10101010101000, 0x5E20202020202000, 0x3E40404040404000, 0x7E80808080808000};
    constexpr uint64_t BISHOP_DEST_TRUNC[64] = {0x40201008040200, 0x402010080400, 0x4020100A00, 0x40221400, 0x2442800, 0x204085000, 0x20408102000, 0x2040810204000, 0x20100804020000, 0x40201008040000, 0x4020100A0000, 0x4022140000, 0x244280000, 0x20408500000, 0x2040810200000, 0x4081020400000, 0x10080402000200, 0x20100804000400, 0x4020100A000A00, 0x402214001400, 0x24428002800, 0x2040850005000, 0x4081020002000, 0x8102040004000, 0x8040200020400, 0x10080400040800, 0x20100A000A1000, 0x40221400142200, 0x2442800284400, 0x4085000500800, 0x8102000201000, 0x10204000402000, 0x4020002040800, 0x8040004081000, 0x100A000A102000, 0x22140014224000, 0x44280028440200, 0x8500050080400, 0x10200020100800, 0x20400040201000, 0x2000204081000, 0x4000408102000, 0xA000A10204000, 0x14001422400000, 0x28002844020000, 0x50005008040200, 0x20002010080400, 0x40004020100800, 0x20408102000, 0x40810204000, 0xA1020400000, 0x142240000000, 0x284402000000, 0x500804020000, 0x201008040200, 0x402010080400, 0x2040810204000, 0x4081020400000, 0xA102040000000, 0x14224000000000, 0x28440200000000, 0x50080402000000, 0x20100804020000, 0x40201008040200};
}

namespace BoardLookup{
    //Index of diagonal from board index
    constexpr int DIAGS_NE[64] = {0, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 8, 2, 3, 4, 5, 6, 7, 8, 9, 3, 4, 5, 6, 7, 8, 9, 10, 4, 5, 6, 7, 8, 9, 10, 11, 5, 6, 7, 8, 9, 10, 11, 12, 6, 7, 8, 9, 10, 11, 12, 13, 7, 8, 9, 10, 11, 12, 13, 14};
    constexpr int DIAGS_NW[64] = {7, 6, 5, 4, 3, 2, 1, 0, 8, 7, 6, 5, 4, 3, 2, 1, 9, 8, 7, 6, 5, 4, 3, 2, 10, 9, 8, 7, 6, 5, 4, 3, 11, 10, 9, 8, 7, 6, 5, 4, 12, 11, 10, 9, 8, 7, 6, 5, 13, 12, 11, 10, 9, 8, 7, 6, 14, 13, 12, 11, 10, 9, 8, 7};
}

namespace BitboardConst{
    constexpr uint64_t NOT_A_FILE {0xFEFEFEFEFEFEFEFE};
    constexpr uint64_t NOT_H_FILE {0x7F7F7F7F7F7F7F7F};
    constexpr uint64_t NOT_1_RANK {0x00FFFFFFFFFFFFFF};
    constexpr uint64_t NOT_8_RANK {0xFFFFFFFFFFFFFF00};
    constexpr uint64_t FULL_BOARD {0xFFFFFFFFFFFFFFF};

    //Bitboards of squares that must be unattacked and empty for castling to be legal.
    constexpr uint64_t WHITE_KS_CASTLE_MASK {0x7000000000000000};
    constexpr uint64_t WHITE_QS_CASTLE_MASK {0x1C00000000000000};
    constexpr uint64_t BLACK_KS_CASTLE_MASK {0x0000000000000070};
    constexpr uint64_t BLACK_QS_CASTLE_MASK {0x000000000000001C};
};

